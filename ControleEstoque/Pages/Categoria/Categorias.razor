@page "/categorias"
@inject HttpClient Http
@inject IJSRuntime JSRuntime

@using EstoqueApp.Web.Models;

<PageTitle>Lista de Categorias</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-3">
    <h1>Lista de Categorias</h1>
    <button class="btn btn-primary bi bi-plus" @onclick="OpenAddModal"></button>
</div>

@if (!string.IsNullOrEmpty(alertMessage))
{
    <div class="alert alert-@alertMessageType alert-dismissible fade show" role="alert">
        @alertMessage
        <button type="button" class="btn-close" aria-label="Close" @onclick="CloseAlert"></button>
    </div>
}

@if (categorias == null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <TabelaCategorias Categorias="categorias" EditarCategorias="OpenEditModal" ExcluirCategorias="ExcluirCategorias" />
}

<ModalCategoria ShowModal="showModal"
                CategoriasEdicao="categoriasEdicao"
                Categorias="categorias"
                HideModalCallback="HideModal"
                SalvarCategoriasCallback="SalvarCategorias"
                IsEditMode="isEditMode" />

@code {
    private bool showModal = false;
    private bool isEditMode = false;
    private Categorias categoriasEdicao = new Categorias();
    private List<CategoriaModel>? categorias;
    private string? alertMessage;
    private string? alertMessageType;
    private bool alertVisible;

    protected override async Task OnInitializedAsync()
    {
        categorias = await GetCategoriasFromApi();
    }

    private async Task<List<CategoriaModel>> GetCategoriasFromApi()
    {
        return await Http.GetFromJsonAsync<List<CategoriaModel>>("https://localhost:7071/Categorias/GetCategorias");
    }

    private void OpenEditModal(Categorias categorias)
    {
        categoriasEdicao = categorias;
        isEditMode = true;
        showModal = true;
    }

    private void OpenAddModal()
    {
        categoriasEdicao = new Categorias();
        isEditMode = false;
        showModal = true;
    }

    private void HideModal()
    {
        showModal = false;
    }

    private async Task ExcluirCategorias(int idCategorias)
    {
        alertMessage = null;
        alertMessageType = null;
        HttpResponseMessage response;

        response = await Http.PatchAsJsonAsync($"https://localhost:7071/Categorias/DeleteCategoriaAsync?id={idCategorias}", "");

        if (response.IsSuccessStatusCode)
        {
            alertMessage = "Categorias exluido com sucesso!";
            alertMessageType = "success";
            categorias = await GetCategoriasFromApi();
        }
        else
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            alertMessage = $"Erro ao excluir o categorias: {errorContent}";
            alertMessageType = "danger";
        }
    }

    private async Task SalvarCategorias(Categorias categoria)
    {
        alertMessage = null;
        alertMessageType = null;

        HttpResponseMessage response;
        if (isEditMode)
        {
            response = await Http.PatchAsJsonAsync("https://localhost:7071/Categorias/UpdateCategoriasAsync", categoria);
        }
        else
        {
            response = await Http.PostAsJsonAsync("https://localhost:7071/Categorias/AddCategoriasAsync", categoria);
        }

        if (response.IsSuccessStatusCode)
        {
            alertMessage = isEditMode ? "Categorias editado com sucesso!" : "Categorias adicionado com sucesso!";
            alertMessageType = "success";
            categorias = await GetCategoriasFromApi(); // Atualiza a lista de categorias
        }
        else
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            alertMessage = $"Erro ao {(isEditMode ? "salvar" : "adicionar")} o categorias: {errorContent}";
            alertMessageType = "danger";
        }

        ShowAlert();
        HideModal();
    }

    private void ShowAlert()
    {
        alertVisible = true;
        StateHasChanged(); // Força a renderização da interface com o novo estado
    }

    private void CloseAlert()
    {
        alertMessage = null;
        alertMessageType = null;
        alertVisible = false;
    }
}
