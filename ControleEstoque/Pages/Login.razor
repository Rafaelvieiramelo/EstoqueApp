@page "/login"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject AuthStateProvider AuthStateProvider

<div class="login-container">
    <div class="login-form">
        <h3>Login</h3>
        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">Email</label>
                <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
            </div>
            <button type="submit" class="btn btn-primary">Login</button>
        </EditForm>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @errorMessage
            </div>
        }
    </div>
</div>

<style>
    body, html {
        height: 100%;
        margin: 0;
    }

    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background-color: transparent; /* Removido o fundo */
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
    }

    .login-form {
        background-color: white;
        padding: 2rem;
        border-radius: 0.5rem;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 400px;
    }

        .login-form h3 {
            margin-bottom: 1.5rem;
            text-align: center;
        }

    .form-group {
        margin-bottom: 1rem;
    }

    .btn-primary {
        width: 100%;
    }
</style>

@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage;

    private async Task HandleLogin()
    {
        var response = await Http.PostAsJsonAsync("https://localhost:7071/Auth/login", loginModel);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<LoginResultDto>();
            if (result?.Token != null)
            {
                await LocalStorage.SetItemAsync("jwtToken", result.Token);
                AuthStateProvider.NotifyUserAuthentication(result.Token);
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = "Invalid username or password.";
            }
        }
        else
        {
            errorMessage = "Invalid username or password.";
        }
    }

    public class LoginModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }

    public class LoginResultDto
    {
        public string Token { get; set; }
    }
}

